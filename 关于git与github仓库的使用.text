#1.首先清楚git和github的关系:  
  git相当于你的本地的仓库管理器;
  github相当于你远程的仓库管理器;
  git –>本地 github –>远程;
  (这也说明git在离线状态下也是能工作的)

#2.作为一个新手如何开始第一步:
  首先找到git的官网进行git的下载安装:
  然后github的账号注册(想必大家都已经有了)
  
#3.介绍俩种刚开始面临的情况:
     (1)本地项目首次上传github
     (2)本地啥也没有，我从github克隆一个库(项目)下载到本地进行管理,最后上传

#4.分析第一种情况:
     前提回顾:你之前从未使用过git管理本地这个文件
     接下来的操作:
     # 先在github创建一个空库(create个库，其他的都不要)
     # 进入本地项目目录
        cd /path/to/your/local-project
     # 初始化 Git（若未初始化）
         git init
     # 配置全局身份（只需一次）
        git config --global user.name "填名字"
        git config --global user.email "填邮箱"
     (这个配置全局身份可以再刚开始就配置,具体作用等会讲)
     # 添加所有文件到暂存区
        git add .
     # 提交到本地仓库
        git commit -m "首次提交"
     # 关联 GitHub 空仓库（粘贴复制的 URL）
        git remote add origin <URL>
     # 首次推送（强制关联分支）
        git push -u origin main
     # 如果本地是 master 分支：
        git push -u origin master
     对操作的解析和扩展:
     [1]首先，先准备让github创建一个空库来接收(必须是空库)，因为github不会自动在你提交的时候识别然后创建一个库给你。
     [2]然后，创建本地的库并管理本地的库->找到你的项目初始化git，配置你的全局身份(这个后面有大用)。这个身份实际就如同它的名字是全局的,不限制于哪个库
     [3]其次，将你所有的文件添加到暂存区(暂存区不会直接提交，就相当于一个临时的盒子，用于储存的修改增加的东西)，接下来就是用commit打包你的暂存区，这时就会把之前的名字和邮箱还有时间已经暂存区文件一起打包提交到本地库进行替换增加。
     [4]最后，这一部分就是关于云端的部分，先关联云端库，也就是Github之前创建的那个空库与它关联。(然后输入git pull拉取到新的文件)–>刚开始可有可无。push你的文件到main分支就行了。
@有点草草了事，先知道这些就好

#5.分析第二种情况:
     前提分析:我本身就没有什么项目上传，我想先创建一个库在github上，然后我本地clone它，再我进行编辑它，最后我上传到云端。
     接下来的操作:
     # 先在github创建一个库(可以配置)
     # 配置全局身份（只需一次）
        git config --global user.name "填名字"
        git config --global user.email "填邮箱"
     # 复制仓库 URL（GitHub 页面的 Clone 按钮）
     # 克隆到本地
        git clone <URL>
        ----------------------------->"如果显示connection reset,请检查系统防火墙,点击允许应用或者功能通过防火墙,添加路径(如:C:/Program/Files/Git/bin/git.exe)"
        cd 仓库名  # 进入目录
     # 修改文件（VS Code 编辑）
     # 添加并提交更改
        git add .
        git commit -m "添加新功能"
     # 拉取更新（多人协作时必做）
        git pull origin main
     # 推送到 GitHub
        git push origin main
     对操作的分析和扩展:
     [1]同理和之前一样，记得配置身份
     [2]通过URL直接clone到我们本地，我们不需要初始化，因为已经给我们初始化好了，这步解决后接下来就是进去库名就行了
     [3]自己在内部进行操作就行了，git add .是全部文件进入暂存区的意思，然后打包commit进本地就行了
     [4]拉取更新，推送github

#6.此部分是关于指令的讲解
(1)关于config全局信息和局部信息的讲解–>我们知道如果我们设置全局信息，那么以后我们的commit的提交都基于我们所设置的全局信息，那我们是不是可以在每个项目也就是每个项目下设置局部信息呢？答案是:yes。我们可以在每个库里设置我们的名字和邮箱，提供给每次都提交。
(2)我们是不是可以关联多个库呢？这显然是对的。在第一种情况中我们就关联了一个远程库，不过那个origin是什么呢？答案是:这是我们给我们远程库取的别名，我们本地将远程库的URL与别名捆绑。那我们可以更改别名在初始化捆绑的时候，那么我们也可以多个别名一一对应多个远程库。
(3)我们看到git add .是表示所有的文件放入暂存区，那么是不是可以特指其中的文件进入而其他的不进入呢？答案是:yes。你可以指定哪些文件进入暂存区，然后在打包进去我们本地库
(4)默认情况下，git push  会推送当前分支上从本地分支与远程分支的共同祖先开始，到本地分支最新提交（HEAD）之间的所有提交（commits）。
(5)可以先配置全局身份，再打开一个项目初始化它。
配置全局身份是通过 git config --global user.name "用户名" 和 git config --global user.email "邮箱地址" 命令，告诉Git每次提交时记录的作者信息，且对所有本地Git仓库生效。而初始化项目是使用 git init 命令，将指定的项目文件夹变成一个Git仓库，让Git开始跟踪该文件夹及其内部文件的变化。先配置全局身份再初始化项目，符合Git的使用流程，能确保在提交项目代码时，正确记录提交者的身份信息。
(6)配置局部身份仅对当前特定的Git仓库有效，会覆盖全局配置。在需要使用不同身份参与不同项目时，这种方式很有用。以下是配置方法：
- 进入仓库目录：使用 cd 命令进入要配置局部身份的Git仓库目录。例如， cd /path/to/your/repo 。
- 设置用户名和邮箱：执行 git config user.name "项目特定的用户名" 和 git config user.email "项目特定的邮箱地址" 命令，设置仓库级别的用户名和邮箱。
局部配置信息保存在仓库的 .git/config 文件中。若要查看当前仓库的局部配置，可在仓库目录下执行 git config --list 命令，通过查看 user.name 和 user.email 确认配置信息。

这个步骤基于CLI实现,可以使用VSCODE的terminal窗口.但有人会问为什么不用GUI来实现,作为初学者的我来说,命令行更能让我弄清楚来龙去脉.
还有很多的指令都没有在这提及,这仅仅是分析俩种新手着手管理本地库和远程库的方式.比如:如何将指定文件放入暂存区的具体指令是什么并没有提及
   


    

